// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.15.6
// source: content_svr/protobuf/pbkfk/kafka_msg.proto

package pbkfk

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SimpleUserWsInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"userId" structs:"userId"
	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId" structs:"userId"` //用户ID
	// @inject_tag: json:"nickName" structs:"nickName"
	NickName string `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName" structs:"nickName"` //用户昵称
	// @inject_tag: json:"photo"  structs:"photo"
	Photo string `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo" structs:"photo"` //用户头像
	// @inject_tag: json:"gender" structs:"gender"
	Gender int32 `protobuf:"varint,4,opt,name=gender,proto3" json:"gender" structs:"gender"` //性别 2女 1男
	// @inject_tag: json:"isConvoy" structs:"isConvoy"
	IsConvoy bool `protobuf:"varint,10,opt,name=isConvoy,proto3" json:"isConvoy" structs:"isConvoy"` //是否是护卫队 true是 false否
	// @inject_tag: json:"showConvoy" structs:"showConvoy"
	ShowConvoy bool `protobuf:"varint,11,opt,name=showConvoy,proto3" json:"showConvoy" structs:"showConvoy"` //是否展示护卫队标识 true是 false否
	// @inject_tag: json:"memberType" structs:"memberType"
	MemberType int32 `protobuf:"varint,12,opt,name=memberType,proto3" json:"memberType" structs:"memberType"` //会员类型 0非会员 1-svip 2赠送会员 3-普通会员
}

func (x *SimpleUserWsInfoResponse) Reset() {
	*x = SimpleUserWsInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleUserWsInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleUserWsInfoResponse) ProtoMessage() {}

func (x *SimpleUserWsInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleUserWsInfoResponse.ProtoReflect.Descriptor instead.
func (*SimpleUserWsInfoResponse) Descriptor() ([]byte, []int) {
	return file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescGZIP(), []int{0}
}

func (x *SimpleUserWsInfoResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SimpleUserWsInfoResponse) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *SimpleUserWsInfoResponse) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *SimpleUserWsInfoResponse) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

func (x *SimpleUserWsInfoResponse) GetIsConvoy() bool {
	if x != nil {
		return x.IsConvoy
	}
	return false
}

func (x *SimpleUserWsInfoResponse) GetShowConvoy() bool {
	if x != nil {
		return x.ShowConvoy
	}
	return false
}

func (x *SimpleUserWsInfoResponse) GetMemberType() int32 {
	if x != nil {
		return x.MemberType
	}
	return 0
}

type PersonalSignTalkWsDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id" structs:"id"
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" structs:"id"` //消息id
	// @inject_tag: json:"workId" structs:"workId"
	WorkId *int64 `protobuf:"varint,2,opt,name=workId,proto3,oneof" json:"workId" structs:"workId"`
	// @inject_tag: json:"fromUserId" structs:"fromUserId"
	FromUserId *int64 `protobuf:"varint,3,opt,name=fromUserId,proto3,oneof" json:"fromUserId" structs:"fromUserId"`
	// @inject_tag: json:"province" structs:"province"
	Province *string `protobuf:"bytes,4,opt,name=province,proto3,oneof" json:"province" structs:"province"`
	// @inject_tag: json:"city" structs:"city"
	City *string `protobuf:"bytes,5,opt,name=city,proto3,oneof" json:"city" structs:"city"`
	// @inject_tag: json:"fromUser" structs:"fromUser"
	FromUser *SimpleUserWsInfoResponse `protobuf:"bytes,6,opt,name=fromUser,proto3,oneof" json:"fromUser" structs:"fromUser"` //消息发布人简略信息
	// @inject_tag: json:"toUserId" structs:"toUserId"
	ToUserId *int64 `protobuf:"varint,7,opt,name=toUserId,proto3,oneof" json:"toUserId" structs:"toUserId"`
	// @inject_tag: json:"content" structs:"content"
	Content *string `protobuf:"bytes,8,opt,name=content,proto3,oneof" json:"content" structs:"content"` //消息内容
	// @inject_tag: json:"createTime" structs:"createTime"
	CreateTime *int64 `protobuf:"varint,9,opt,name=createTime,proto3,oneof" json:"createTime" structs:"createTime"` // 消息发布时间
	// @inject_tag: json:"width" structs:"width"
	Width *int32 `protobuf:"varint,10,opt,name=width,proto3,oneof" json:"width" structs:"width"` // 图片消息时候图片的宽度
	// @inject_tag: json:"high" structs:"high"
	High *int32 `protobuf:"varint,11,opt,name=high,proto3,oneof" json:"high" structs:"high"` // 图片消息时图片的高度
	// @inject_tag: json:"objectId" structs:"objectId"
	ObjectId *string `protobuf:"bytes,12,opt,name=objectId,proto3,oneof" json:"objectId" structs:"objectId"` // 图片或语音消息时存储在OSS的标识
	// @inject_tag: json:"messageType" structs:"messageType"
	MessageType *int32 `protobuf:"varint,13,opt,name=messageType,proto3,oneof" json:"messageType" structs:"messageType"` //，1:文字;2:图片;3:语音;99:自定义表情
	// @inject_tag: json:"memeId" structs:"memeId"
	MemeId *int64 `protobuf:"varint,14,opt,name=memeId,proto3,oneof" json:"memeId" structs:"memeId"` //自定义表情的id
	// @inject_tag: json:"longitude" structs:"longitude"
	Longitude *float64 `protobuf:"fixed64,15,opt,name=longitude,proto3,oneof" json:"longitude" structs:"longitude"` // 经度
	// @inject_tag: json:"latitude" structs:"latitude"
	Latitude *float64 `protobuf:"fixed64,16,opt,name=latitude,proto3,oneof" json:"latitude" structs:"latitude"` // 纬度
	// @inject_tag: json:"openId" structs:"openId"
	OpenId *string `protobuf:"bytes,17,opt,name=openId,proto3,oneof" json:"openId" structs:"openId"` // 消息发布人的openId，仅对方是QQ端有值
}

func (x *PersonalSignTalkWsDto) Reset() {
	*x = PersonalSignTalkWsDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalSignTalkWsDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalSignTalkWsDto) ProtoMessage() {}

func (x *PersonalSignTalkWsDto) ProtoReflect() protoreflect.Message {
	mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalSignTalkWsDto.ProtoReflect.Descriptor instead.
func (*PersonalSignTalkWsDto) Descriptor() ([]byte, []int) {
	return file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescGZIP(), []int{1}
}

func (x *PersonalSignTalkWsDto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetWorkId() int64 {
	if x != nil && x.WorkId != nil {
		return *x.WorkId
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetFromUserId() int64 {
	if x != nil && x.FromUserId != nil {
		return *x.FromUserId
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetProvince() string {
	if x != nil && x.Province != nil {
		return *x.Province
	}
	return ""
}

func (x *PersonalSignTalkWsDto) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *PersonalSignTalkWsDto) GetFromUser() *SimpleUserWsInfoResponse {
	if x != nil {
		return x.FromUser
	}
	return nil
}

func (x *PersonalSignTalkWsDto) GetToUserId() int64 {
	if x != nil && x.ToUserId != nil {
		return *x.ToUserId
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *PersonalSignTalkWsDto) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetHigh() int32 {
	if x != nil && x.High != nil {
		return *x.High
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetObjectId() string {
	if x != nil && x.ObjectId != nil {
		return *x.ObjectId
	}
	return ""
}

func (x *PersonalSignTalkWsDto) GetMessageType() int32 {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetMemeId() int64 {
	if x != nil && x.MemeId != nil {
		return *x.MemeId
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetLongitude() float64 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetLatitude() float64 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *PersonalSignTalkWsDto) GetOpenId() string {
	if x != nil && x.OpenId != nil {
		return *x.OpenId
	}
	return ""
}

type TsnPushSingleMessageDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"type" structs:"type"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type" structs:"type"` //required 消息类型  系统通知 system_notification 单聊消息 single_message
	// @inject_tag: json:"title" structs:"title"
	Title *string `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title" structs:"title"` // 标题
	// @inject_tag: json:"subtitle" structs:"subtitle"
	Subtitle *string `protobuf:"bytes,3,opt,name=subtitle,proto3,oneof" json:"subtitle" structs:"subtitle"` //副标题
	// @inject_tag: json:"planId" structs:"planId"
	PlanId *int64 `protobuf:"varint,4,opt,name=planId,proto3,oneof" json:"planId" structs:"planId"` //推送计划的id
	// @inject_tag: json:"content" structs:"content"
	Content *string `protobuf:"bytes,5,opt,name=content,proto3,oneof" json:"content" structs:"content"` //required 内容
	// @inject_tag: json:"icon" structs:"icon"
	Icon *string `protobuf:"bytes,6,opt,name=icon,proto3,oneof" json:"icon" structs:"icon"` //图片
	// @inject_tag: json:"customContent" structs:"customContent"
	CustomContent *string `protobuf:"bytes,7,opt,name=customContent,proto3,oneof" json:"customContent" structs:"customContent"` //附加参数对象 转为json字符串
	// @inject_tag: json:"userIds" structs:"userIds"
	UserIds []int64 `protobuf:"varint,8,rep,packed,name=userIds,proto3" json:"userIds" structs:"userIds"` //消息接收人，不传则为全量推送
	// @inject_tag: json:"messageType" structs:"messageType"
	MessageType *string `protobuf:"bytes,9,opt,name=messageType,proto3,oneof" json:"messageType" structs:"messageType"` //required 消息类型：通知栏消息notify 静默消息message
	// @inject_tag: json:"intent" structs:"intent"
	Intent *string `protobuf:"bytes,10,opt,name=intent,proto3,oneof" json:"intent" structs:"intent"` // 安卓唤起路径
	// @inject_tag: json:"environment" structs:"environment"
	Environment *string `protobuf:"bytes,11,opt,name=environment,proto3,oneof" json:"environment" structs:"environment"` //ios环境 product dev
	// @inject_tag: json:"platforms" structs:"platforms"
	Platforms []string `protobuf:"bytes,12,rep,name=platforms,proto3" json:"platforms" structs:"platforms"` //推送平台ios android，不传为全平台推送
}

func (x *TsnPushSingleMessageDto) Reset() {
	*x = TsnPushSingleMessageDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TsnPushSingleMessageDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TsnPushSingleMessageDto) ProtoMessage() {}

func (x *TsnPushSingleMessageDto) ProtoReflect() protoreflect.Message {
	mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TsnPushSingleMessageDto.ProtoReflect.Descriptor instead.
func (*TsnPushSingleMessageDto) Descriptor() ([]byte, []int) {
	return file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescGZIP(), []int{2}
}

func (x *TsnPushSingleMessageDto) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetSubtitle() string {
	if x != nil && x.Subtitle != nil {
		return *x.Subtitle
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetPlanId() int64 {
	if x != nil && x.PlanId != nil {
		return *x.PlanId
	}
	return 0
}

func (x *TsnPushSingleMessageDto) GetContent() string {
	if x != nil && x.Content != nil {
		return *x.Content
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetCustomContent() string {
	if x != nil && x.CustomContent != nil {
		return *x.CustomContent
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetUserIds() []int64 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *TsnPushSingleMessageDto) GetMessageType() string {
	if x != nil && x.MessageType != nil {
		return *x.MessageType
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetIntent() string {
	if x != nil && x.Intent != nil {
		return *x.Intent
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetEnvironment() string {
	if x != nil && x.Environment != nil {
		return *x.Environment
	}
	return ""
}

func (x *TsnPushSingleMessageDto) GetPlatforms() []string {
	if x != nil {
		return x.Platforms
	}
	return nil
}

type PersonalBottleWorksDto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"id"
	Id *int64 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id"`
	// @inject_tag: json:"userId"
	UserId *int64 `protobuf:"varint,2,opt,name=userId,proto3,oneof" json:"userId"`
	// @inject_tag: json:"title"
	Title *string `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title"`
	// @inject_tag: json:"createTime"
	CreateTime *int64 `protobuf:"varint,4,opt,name=createTime,proto3,oneof" json:"createTime"`
	// @inject_tag: json:"systemTime"
	SystemTime *int64 `protobuf:"varint,5,opt,name=systemTime,proto3,oneof" json:"systemTime"`
	// @inject_tag: json:"type"
	Type *int32 `protobuf:"varint,6,opt,name=type,proto3,oneof" json:"type"` //      1- 新增或更新   2- 删除
	// @inject_tag: json:"startTime"
	StartTime *int64 `protobuf:"varint,7,opt,name=startTime,proto3,oneof" json:"startTime"`
	// @inject_tag: json:"endTime"
	EndTime *int64 `protobuf:"varint,8,opt,name=endTime,proto3,oneof" json:"endTime"`
	// @inject_tag: json:"appType"
	AppType *int32 `protobuf:"varint,9,opt,name=appType,proto3,oneof" json:"appType"`
	// @inject_tag: json:"verifyStatus"
	VerifyStatus *int32 `protobuf:"varint,10,opt,name=verifyStatus,proto3,oneof" json:"verifyStatus"` // 0待审核 1审核通过 2审核拒绝 5隐藏
	// @inject_tag: json:"worksType"
	WorksType *int32 `protobuf:"varint,11,opt,name=worksType,proto3,oneof" json:"worksType"`
}

func (x *PersonalBottleWorksDto) Reset() {
	*x = PersonalBottleWorksDto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersonalBottleWorksDto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersonalBottleWorksDto) ProtoMessage() {}

func (x *PersonalBottleWorksDto) ProtoReflect() protoreflect.Message {
	mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersonalBottleWorksDto.ProtoReflect.Descriptor instead.
func (*PersonalBottleWorksDto) Descriptor() ([]byte, []int) {
	return file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescGZIP(), []int{3}
}

func (x *PersonalBottleWorksDto) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PersonalBottleWorksDto) GetCreateTime() int64 {
	if x != nil && x.CreateTime != nil {
		return *x.CreateTime
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetSystemTime() int64 {
	if x != nil && x.SystemTime != nil {
		return *x.SystemTime
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetEndTime() int64 {
	if x != nil && x.EndTime != nil {
		return *x.EndTime
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetAppType() int32 {
	if x != nil && x.AppType != nil {
		return *x.AppType
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetVerifyStatus() int32 {
	if x != nil && x.VerifyStatus != nil {
		return *x.VerifyStatus
	}
	return 0
}

func (x *PersonalBottleWorksDto) GetWorksType() int32 {
	if x != nil && x.WorksType != nil {
		return *x.WorksType
	}
	return 0
}

type CtxHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: json:"userAgent"
	UserAgent string `protobuf:"bytes,1,opt,name=userAgent,proto3" json:"userAgent"` //客户端的系统版本
	// @inject_tag: json:"remoteAddr"
	RemoteAddr string `protobuf:"bytes,2,opt,name=remoteAddr,proto3" json:"remoteAddr"` //客户端的IP
	// @inject_tag: json:"remoteHost"
	RemoteHost string `protobuf:"bytes,3,opt,name=remoteHost,proto3" json:"remoteHost"` //客户端的主机名
	// @inject_tag: json:"remotePort"
	RemotePort int32 `protobuf:"varint,4,opt,name=remotePort,proto3" json:"remotePort"` //客户端的端口
	// @inject_tag: json:"remoteUser"
	RemoteUser string `protobuf:"bytes,5,opt,name=remoteUser,proto3" json:"remoteUser"` //客户端的用户
	// @inject_tag: json:"localAddr"
	LocalAddr string `protobuf:"bytes,6,opt,name=localAddr,proto3" json:"localAddr"` //服务器IP
	// @inject_tag: json:"localPort"
	LocalPort int32 `protobuf:"varint,7,opt,name=localPort,proto3" json:"localPort"` //服务器端口Integer
	// @inject_tag: json:"phoneId"
	PhoneId string `protobuf:"bytes,8,opt,name=phoneId,proto3" json:"phoneId"` //手机的id
	// @inject_tag: json:"phoneBrand"
	PhoneBrand string `protobuf:"bytes,9,opt,name=phoneBrand,proto3" json:"phoneBrand"` //手机厂商
	// @inject_tag: json:"phoneModel"
	PhoneModel string `protobuf:"bytes,10,opt,name=phoneModel,proto3" json:"phoneModel"` //手机型号
	// @inject_tag: json:"phoneOS"
	PhoneOS string `protobuf:"bytes,11,opt,name=phoneOS,proto3" json:"phoneOS"` //手机系统
	// @inject_tag: json:"phoneOSVersion"
	PhoneOSVersion string `protobuf:"bytes,12,opt,name=phoneOSVersion,proto3" json:"phoneOSVersion"` //手机系统版本
	// @inject_tag: json:"token"
	Token string `protobuf:"bytes,13,opt,name=token,proto3" json:"token"` //header中的token
	// @inject_tag: json:"uk"
	Uk string `protobuf:"bytes,14,opt,name=uk,proto3" json:"uk"` //header中的uk
	// @inject_tag: json:"versioncode"
	Versioncode string `protobuf:"bytes,15,opt,name=versioncode,proto3" json:"versioncode"` //header中的versioncode
	// @inject_tag: json:"channel"
	Channel string `protobuf:"bytes,16,opt,name=channel,proto3" json:"channel"` //header中的channel
	// @inject_tag: json:"entrance"
	Entrance string `protobuf:"bytes,17,opt,name=entrance,proto3" json:"entrance"` //header中的entrance
	// @inject_tag: json:"timestamp"
	Timestamp string `protobuf:"bytes,18,opt,name=timestamp,proto3" json:"timestamp"` //header中的timestamp
	// @inject_tag: json:"appname"
	Appname string `protobuf:"bytes,19,opt,name=appname,proto3" json:"appname"` //header中的appname
	// @inject_tag: json:"sign"
	Sign string `protobuf:"bytes,20,opt,name=sign,proto3" json:"sign"` //header中的sign
	// @inject_tag: json:"apptype"
	Apptype string `protobuf:"bytes,21,opt,name=apptype,proto3" json:"apptype"` //header中的apptype
}

func (x *CtxHeader) Reset() {
	*x = CtxHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtxHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtxHeader) ProtoMessage() {}

func (x *CtxHeader) ProtoReflect() protoreflect.Message {
	mi := &file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtxHeader.ProtoReflect.Descriptor instead.
func (*CtxHeader) Descriptor() ([]byte, []int) {
	return file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescGZIP(), []int{4}
}

func (x *CtxHeader) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *CtxHeader) GetRemoteAddr() string {
	if x != nil {
		return x.RemoteAddr
	}
	return ""
}

func (x *CtxHeader) GetRemoteHost() string {
	if x != nil {
		return x.RemoteHost
	}
	return ""
}

func (x *CtxHeader) GetRemotePort() int32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *CtxHeader) GetRemoteUser() string {
	if x != nil {
		return x.RemoteUser
	}
	return ""
}

func (x *CtxHeader) GetLocalAddr() string {
	if x != nil {
		return x.LocalAddr
	}
	return ""
}

func (x *CtxHeader) GetLocalPort() int32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *CtxHeader) GetPhoneId() string {
	if x != nil {
		return x.PhoneId
	}
	return ""
}

func (x *CtxHeader) GetPhoneBrand() string {
	if x != nil {
		return x.PhoneBrand
	}
	return ""
}

func (x *CtxHeader) GetPhoneModel() string {
	if x != nil {
		return x.PhoneModel
	}
	return ""
}

func (x *CtxHeader) GetPhoneOS() string {
	if x != nil {
		return x.PhoneOS
	}
	return ""
}

func (x *CtxHeader) GetPhoneOSVersion() string {
	if x != nil {
		return x.PhoneOSVersion
	}
	return ""
}

func (x *CtxHeader) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CtxHeader) GetUk() string {
	if x != nil {
		return x.Uk
	}
	return ""
}

func (x *CtxHeader) GetVersioncode() string {
	if x != nil {
		return x.Versioncode
	}
	return ""
}

func (x *CtxHeader) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *CtxHeader) GetEntrance() string {
	if x != nil {
		return x.Entrance
	}
	return ""
}

func (x *CtxHeader) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *CtxHeader) GetAppname() string {
	if x != nil {
		return x.Appname
	}
	return ""
}

func (x *CtxHeader) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *CtxHeader) GetApptype() string {
	if x != nil {
		return x.Apptype
	}
	return ""
}

var File_content_svr_protobuf_pbkfk_kafka_msg_proto protoreflect.FileDescriptor

var file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x76, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x62, 0x6b, 0x66, 0x6b, 0x2f, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x01, 0x0a,
	0x18, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x57, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x76, 0x6f, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x76, 0x6f, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x84, 0x06, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x6c, 0x6b, 0x57, 0x73, 0x44, 0x74,
	0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x57, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x04, 0x52, 0x08, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x6f, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x08, 0x74,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6d, 0x65,
	0x6d, 0x65, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x68, 0x69, 0x67, 0x68,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x6d, 0x65, 0x6d, 0x65, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x80,
	0x04, 0x0a, 0x17, 0x54, 0x73, 0x6e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x62, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x69, 0x63, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xfd, 0x03, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x44, 0x74, 0x6f, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x07, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x08, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xe5, 0x04, 0x0a, 0x09, 0x43, 0x74, 0x78, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x53, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x53, 0x12, 0x26, 0x0a,
	0x0e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4f, 0x53, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x75,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x75, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x70, 0x70, 0x74, 0x79, 0x70, 0x65, 0x42, 0x22, 0x5a, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x76, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x70, 0x62, 0x6b, 0x66, 0x6b, 0x3b, 0x70, 0x62, 0x6b, 0x66, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescOnce sync.Once
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescData = file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDesc
)

func file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescGZIP() []byte {
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescOnce.Do(func() {
		file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescData)
	})
	return file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDescData
}

var file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_content_svr_protobuf_pbkfk_kafka_msg_proto_goTypes = []interface{}{
	(*SimpleUserWsInfoResponse)(nil), // 0: SimpleUserWsInfoResponse
	(*PersonalSignTalkWsDto)(nil),    // 1: PersonalSignTalkWsDto
	(*TsnPushSingleMessageDto)(nil),  // 2: TsnPushSingleMessageDto
	(*PersonalBottleWorksDto)(nil),   // 3: PersonalBottleWorksDto
	(*CtxHeader)(nil),                // 4: CtxHeader
}
var file_content_svr_protobuf_pbkfk_kafka_msg_proto_depIdxs = []int32{
	0, // 0: PersonalSignTalkWsDto.fromUser:type_name -> SimpleUserWsInfoResponse
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_content_svr_protobuf_pbkfk_kafka_msg_proto_init() }
func file_content_svr_protobuf_pbkfk_kafka_msg_proto_init() {
	if File_content_svr_protobuf_pbkfk_kafka_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleUserWsInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalSignTalkWsDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TsnPushSingleMessageDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersonalBottleWorksDto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtxHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_content_svr_protobuf_pbkfk_kafka_msg_proto_goTypes,
		DependencyIndexes: file_content_svr_protobuf_pbkfk_kafka_msg_proto_depIdxs,
		MessageInfos:      file_content_svr_protobuf_pbkfk_kafka_msg_proto_msgTypes,
	}.Build()
	File_content_svr_protobuf_pbkfk_kafka_msg_proto = out.File
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_rawDesc = nil
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_goTypes = nil
	file_content_svr_protobuf_pbkfk_kafka_msg_proto_depIdxs = nil
}
